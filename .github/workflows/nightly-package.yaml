name: Nightly Package Tests
on:
  schedule:
    - cron: '10 11 * * *' # run at 11:10 AM UTC
  workflow_dispatch:  # to trigger manually

jobs:
  all:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install "startorch[all]"

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "

      - name: Check imports
        run: |
          python -c "from startorch.sequence import BaseSequenceGenerator"
          python -c "from startorch.tensor import BaseTensorGenerator"

  min:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install startorch

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "

  coola:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]
        coola-version: [ 0.1.2, 0.1.1, 0.1.0, 0.0.26, 0.0.25, 0.0.24, 0.0.23, 0.0.22, 0.0.21, 0.0.20 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install startorch coola==${{ matrix.coola-version }}

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "

  objectory:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]
        objectory-version: [ 0.1.0, 0.0.9, 0.0.8, 0.0.7 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install startorch objectory==${{ matrix.objectory-version }}

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "

  redcat:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]
        redcat-version: [ 0.0.18, 0.0.17, 0.0.16 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install startorch redcat==${{ matrix.redcat-version }}

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "

  torch:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.11', '3.10', '3.9' ]
        torch-version: [ 2.1.2, 2.0.1 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install startorch torch==${{ matrix.pytorch-version }}

      - name: Run short experiment
        run: |
          python -c "import startorch; import torch;" \
            "assert isinstance(startorch.random.uniform(0.0, 10.0), torch.Tensor); "
