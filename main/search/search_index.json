{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p><code>startorch</code> is a Python library to generate synthetic time-series. As the name suggest, <code>startorch</code> relies mostly on PyTorch to generate the time series and to control the randomness. <code>startorch</code> is built to be modular, flexible and extensible. For example, it is easy to combine multiple core sequence generator to generate complex sequences. The user is responsible to define the recipe to generate the time series. Below show some generated sequences by <code>startorch</code> where the values are sampled from different distribution.</p> uniform log-uniform sine wave Wiener process"},{"location":"#motivation","title":"Motivation","text":"<p>Collecting datasets to train Machine Learning models can be time consuming. Another alternative is to use synthetic datasets. <code>startorch</code> provides modules to easily generate synthetic time series. The user is responsible to define the recipe to generate the time series. The following example shows how to generate a sequence where the values are sampled from a Normal distribution.</p> <pre><code>from startorch.sequence import RandNormal\n\ngenerator = RandNormal(mean=0.0, std=1.0)\nbatch = generator.generate(seq_len=128, batch_size=4)\n</code></pre> <p>It is possible to combine multiple generators to build a more complex generator. The example below shows how to build a generator that sums multiple the output of three sine wave generators.</p> <pre><code>from startorch.sequence import (\n    Add,\n    Arange,\n    Constant,\n    RandLogUniform,\n    RandUniform,\n    SineWave,\n)\n\ngenerator = Add(\n    (\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n    )\n)\nbatch = generator.generate(seq_len=128, batch_size=4)\n</code></pre>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>startorch</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>startorch</code> to a new version will possibly break any code that was using the old version of <code>startorch</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>startorch</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install startorch\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>startorch</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'startorch[all]'\n</code></pre> <p>This command also install all the optional packages like matplotlib. It is also possible to install the optional packages manually or to select the packages to install. In the following example, only matplotlib is installed:</p> <pre><code>pip install startorch matplotlib\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>startorch</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/startorch.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate startorch\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>startorch</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"sequence/","title":"Sequence","text":"<p> This page is a quick overview of how to use sequence generators, and how to implement custom sequence generators. This page does not present the implementation of the builtin sequence generators.</p>"},{"location":"sequence/#introduction","title":"Introduction","text":"<p>The main objects to generate synthetic sequences are the sequence generators. The API of the sequence generator is defined in <code>BaseSequenceGenerator</code>. Note that <code>startorch</code> generates sequences by batch to be more efficient. It is not possible to generate a single sequence, but it is possible to generate a batch of one sequence.</p>"},{"location":"sequence/#builtin-sequence-generators","title":"Builtin sequence generators","text":"<p><code>startorch</code> has a lot of builtin sequence generators. Below is a non-exhaustive list of the sequence generators:</p> <ul> <li><code>Abs</code></li> <li><code>Acosh</code></li> <li><code>Add</code></li> <li><code>AddScalar</code></li> <li><code>Arange</code></li> <li><code>Asinh</code></li> <li><code>AsinhUniform</code></li> <li><code>Atanh</code></li> <li><code>AutoRegressive</code></li> <li><code>Cat2</code></li> <li><code>Cauchy</code></li> <li><code>Clamp</code></li> <li><code>Constant</code></li> <li><code>Cosh</code></li> <li><code>Cumsum</code></li> <li><code>Div</code></li> <li><code>Exp</code></li> <li><code>Exponential</code></li> <li><code>Float</code></li> <li><code>Fmod</code></li> <li><code>Full</code></li> <li><code>HalfCauchy</code></li> <li><code>HalfNormal</code></li> <li><code>Linear</code></li> <li><code>Log</code></li> <li><code>LogNormal</code></li> <li><code>LogUniform</code></li> <li><code>Long</code></li> <li><code>Mul</code></li> <li><code>MulScalar</code></li> <li><code>Multinomial</code></li> <li><code>MultinomialChoice</code></li> <li><code>Neg</code></li> <li><code>Normal</code></li> <li><code>Poisson</code></li> <li><code>RandAsinhUniform</code></li> <li><code>RandCauchy</code></li> <li><code>RandExponential</code></li> <li><code>RandHalfCauchy</code></li> <li><code>RandHalfNormal</code></li> <li><code>RandInt</code></li> <li><code>RandLogNormal</code></li> <li><code>RandLogUniform</code></li> <li><code>RandNormal</code></li> <li><code>RandPoisson</code></li> <li><code>RandTruncCauchy</code></li> <li><code>RandTruncExponential</code></li> <li><code>RandTruncHalfCauchy</code></li> <li><code>RandTruncHalfNormal</code></li> <li><code>RandTruncLogNormal</code></li> <li><code>RandTruncNormal</code></li> <li><code>RandUniform</code></li> <li><code>RandWienerProcess</code></li> <li><code>SineWave</code></li> <li><code>Sinh</code></li> <li><code>Sort</code></li> <li><code>Sqrt</code></li> <li><code>Sub</code></li> <li><code>Tanh</code></li> <li><code>TensorSequence</code></li> <li><code>Time</code></li> <li><code>TruncCauchy</code></li> <li><code>TruncExponential</code></li> <li><code>TruncHalfCauchy</code></li> <li><code>TruncHalfNormal</code></li> <li><code>TruncLogNormal</code></li> <li><code>TruncNormal</code></li> <li><code>Uniform</code></li> <li><code>UniformCategorical</code></li> </ul> <p>These builtin sequence generators can been seen as basic blocks to generate sequences, or to build more complex sequence generators.</p>"},{"location":"sequence/#generate-a-batch-of-sequences","title":"Generate a batch of sequences","text":"<p>This section shows how to use a sequence generator to generate a batch of sequences. Let's assume we want to generate a batch of sequences where the value are sampled from a uniform distribution <code>U[-5, 5]</code>. This can be easily done with <code>startorch</code> by writing the following lines.</p> <pre><code>from startorch.sequence import RandUniform\n\ngenerator = RandUniform(low=-5, high=5)\nprint(generator.generate(seq_len=6, batch_size=2))\n</code></pre> <p>Output:</p> <pre><code>tensor([[[ 2.6437],\n         [ 2.1046],\n         [ 3.9529],\n         [-2.9899],\n         [ 3.6624],\n         [-3.8132]],\n\n        [[ 1.9843],\n         [ 3.1455],\n         [ 3.2380],\n         [ 1.3003],\n         [ 1.0235],\n         [-4.7955]]])\n</code></pre> <p><code>seq_len</code> controls the sequence length and <code>batch_size</code> controls the number of sequences in the batch.</p>"},{"location":"sequence/#combining-sequence-generators","title":"Combining sequence generators","text":"<p>A lot of the builtin sequence generators and modular and can be combined to build more complex sequence generators. The following example shows how to build a sequence generator that sums the outputs of three sine wave sequence generators.</p> <pre><code>from startorch.sequence import (\n    Add,\n    Arange,\n    Constant,\n    RandLogUniform,\n    RandUniform,\n    SineWave,\n)\n\ngenerator = Add(\n    (\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n        SineWave(\n            value=Arange(),\n            frequency=Constant(RandLogUniform(low=0.01, high=0.1)),\n            phase=Constant(RandUniform(low=-1.0, high=1.0)),\n            amplitude=Constant(RandLogUniform(low=0.1, high=1.0)),\n        ),\n    )\n)\nbatch = generator.generate(seq_len=128, batch_size=4)\n</code></pre>"},{"location":"sequence/#randomness","title":"Randomness","text":"<p>It is possible to control the randomness of the sequence generators to make the process reproducible. A <code>torch.Generator</code> object is used to control the randomness. The following example shows how to generate the same batch of sequences.</p> <pre><code>from startorch.sequence import RandUniform\nfrom startorch.utils.seed import get_torch_generator\n\ngenerator = RandUniform(feature_size=())\nprint(generator.generate(seq_len=6, batch_size=2, rng=get_torch_generator(1)))\nprint(generator.generate(seq_len=6, batch_size=2, rng=get_torch_generator(1)))\n</code></pre> <p>Output:</p> <pre><code>tensor([[0.7576, 0.2793, 0.4031, 0.7347, 0.0293, 0.7999],\n        [0.3971, 0.7544, 0.5695, 0.4388, 0.6387, 0.5247]])\ntensor([[0.7576, 0.2793, 0.4031, 0.7347, 0.0293, 0.7999],\n        [0.3971, 0.7544, 0.5695, 0.4388, 0.6387, 0.5247]])\n</code></pre> <p>The two generated tensors have the same values.</p>"},{"location":"sequence/#how-to-implement-a-sequence-generator","title":"How to implement a sequence generator","text":"<p>This section explains how to implement a custom sequence generator. <code>startorch</code> has a lot of builtin sequence generator but it is possible to implement custom sequence generators. A custom sequence generator has to follow the API defined in <code>BaseSequenceGenerator</code>.</p> <p>Let's assume we want to generate a sequence generator that returns sequence filled with only the number 42. The following piece of code shows how to implement this sequence generator.</p> <pre><code>from __future__ import annotations\n\nimport torch\n\nfrom startorch.sequence import BaseSequenceGenerator\nfrom startorch.utils.conversion import to_tuple\n\n\nclass FortyTwoSequenceGenerator(BaseSequenceGenerator):\n    def __init__(\n        self,\n        feature_size: tuple[int, ...] | list[int] | int = 1,\n    ) -&gt; None:\n        super().__init__()\n        self._feature_size = to_tuple(feature_size)\n\n    def __repr__(self) -&gt; str:  # This method is optional but nice to have\n        return f\"{self.__class__.__qualname__}(feature_size={self._feature_size})\"\n\n    def generate(\n        self, seq_len: int, batch_size: int = 1, rng: torch.Generator | None = None\n    ) -&gt; torch.Tensor:\n        return torch.full((batch_size, seq_len) + self._feature_size, 42.0)\n\n\ngenerator = FortyTwoSequenceGenerator(feature_size=())\nprint(generator)\nprint(generator.generate(seq_len=6, batch_size=2))\n</code></pre> <p>Output:</p> <pre><code>FortyTwoSequenceGenerator(feature_size=())\ntensor([[42., 42., 42., 42., 42., 42.],\n        [42., 42., 42., 42., 42., 42.]])\n</code></pre> <p>This implementation allows to configure the feature size.</p>"},{"location":"sequence/#naming-conventions","title":"Naming conventions","text":"<p><code>RandXXX</code> indicates a standalone sequence generator i.e. a sequence generator that does not require sequence generators as input to work. For example, <code>RandUniform</code> is the standalone version of <code>Uniform</code>. <code>Uniform</code> allows to build more complex sequence generators but it can be more difficult to use because it has more parameters to configure.</p> <ul> <li><code>RandUniform</code> example</li> </ul> <pre><code>from startorch.sequence import RandUniform\n\ngenerator = RandUniform(low=-5, high=5)\ngenerator.generate(seq_len=128, batch_size=4)\n</code></pre> <ul> <li><code>Uniform</code> example</li> </ul> <pre><code>from startorch.sequence import RandUniform, Uniform\n\ngenerator = Uniform(low=RandUniform(-1.0, 0.0), high=RandUniform(0.0, 1.0))\ngenerator.generate(seq_len=128, batch_size=4)\n</code></pre> <p><code>TruncXXX</code> indicates the sequence generator sampled value from a truncated distribution. For example, <code>RandTruncCauchy</code> samples values from a truncated Cauchy distribution whereas <code>RandCauchy</code> samples values from a Cauchy distribution.</p> <ul> <li><code>RandCauchy</code> example</li> </ul> <pre><code>from startorch.sequence import RandCauchy\n\ngenerator = RandCauchy()\ngenerator.generate(seq_len=128, batch_size=4)\n</code></pre> <ul> <li><code>RandTruncCauchy</code> example</li> </ul> <pre><code>from startorch.sequence import RandTruncCauchy\n\ngenerator = RandTruncCauchy()\ngenerator.generate(seq_len=128, batch_size=4)\n</code></pre>"}]}